# Production Docker Compose Configuration
# Orchestrates LangGraph 101 with all enterprise security components

version: '3.8'

services:
  # Main LangGraph 101 Application
  langgraph-app:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: langgraph-production
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "8501:8501"
    environment:
      - ENVIRONMENT=production
      - SECURITY_ENABLED=true
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/langgraph_db
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SESSION_SECRET=${SESSION_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    volumes:
      - app_logs:/app/logs
      - app_data:/app/data
      - app_config:/app/config
    depends_on:
      - redis
      - postgres
      - nginx
    networks:
      - langgraph_network
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: langgraph-redis
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - langgraph_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: langgraph-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=langgraph_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - langgraph_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d langgraph_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: langgraph-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - langgraph-app
    networks:
      - langgraph_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Security Monitoring (Optional)
  security-monitor:
    build:
      context: .
      dockerfile: Dockerfile.security-monitor
    container_name: langgraph-security-monitor
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
    volumes:
      - app_logs:/app/logs:ro
      - security_logs:/var/log/security
    depends_on:
      - redis
    networks:
      - langgraph_network

# Named Volumes for Data Persistence
volumes:
  app_logs:
    driver: local
  app_data:
    driver: local
  app_config:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  nginx_logs:
    driver: local
  security_logs:
    driver: local

# Custom Network
networks:
  langgraph_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
